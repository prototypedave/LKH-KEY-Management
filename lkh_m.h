//
// Generated file, do not edit! Created by opp_msgtool 6.0 from inet/applications/lkh/lkh.msg.
//

#ifndef __INET_LKH_M_H
#define __INET_LKH_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class JoinRequestPacket;
class SessionKeyPacket;
class LeaveRequestPacket;

}  // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk


namespace inet {

/**
 * Class generated from <tt>inet/applications/lkh/lkh.msg:7</tt> by opp_msgtool.
 * <pre>
 * class JoinRequestPacket extends FieldsChunk
 * {
 *     string node;
 * }
 * </pre>
 */
class INET_API JoinRequestPacket : public ::inet::FieldsChunk
{
  protected:
    ::omnetpp::opp_string node;

  private:
    void copy(const JoinRequestPacket& other);

  protected:
    bool operator==(const JoinRequestPacket&) = delete;

  public:
    JoinRequestPacket();
    JoinRequestPacket(const JoinRequestPacket& other);
    virtual ~JoinRequestPacket();
    JoinRequestPacket& operator=(const JoinRequestPacket& other);
    virtual JoinRequestPacket *dup() const override {return new JoinRequestPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getNode() const;
    virtual void setNode(const char * node);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const JoinRequestPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, JoinRequestPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/applications/lkh/lkh.msg:12</tt> by opp_msgtool.
 * <pre>
 * class SessionKeyPacket extends FieldsChunk
 * {
 *     string key;
 *     double start;
 * }
 * </pre>
 */
class INET_API SessionKeyPacket : public ::inet::FieldsChunk
{
  protected:
    ::omnetpp::opp_string key;
    double start = 0;

  private:
    void copy(const SessionKeyPacket& other);

  protected:
    bool operator==(const SessionKeyPacket&) = delete;

  public:
    SessionKeyPacket();
    SessionKeyPacket(const SessionKeyPacket& other);
    virtual ~SessionKeyPacket();
    SessionKeyPacket& operator=(const SessionKeyPacket& other);
    virtual SessionKeyPacket *dup() const override {return new SessionKeyPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getKey() const;
    virtual void setKey(const char * key);

    virtual double getStart() const;
    virtual void setStart(double start);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const SessionKeyPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, SessionKeyPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/applications/lkh/lkh.msg:18</tt> by opp_msgtool.
 * <pre>
 * class LeaveRequestPacket extends FieldsChunk
 * {
 *     string node;
 * }
 * </pre>
 */
class INET_API LeaveRequestPacket : public ::inet::FieldsChunk
{
  protected:
    ::omnetpp::opp_string node;

  private:
    void copy(const LeaveRequestPacket& other);

  protected:
    bool operator==(const LeaveRequestPacket&) = delete;

  public:
    LeaveRequestPacket();
    LeaveRequestPacket(const LeaveRequestPacket& other);
    virtual ~LeaveRequestPacket();
    LeaveRequestPacket& operator=(const LeaveRequestPacket& other);
    virtual LeaveRequestPacket *dup() const override {return new LeaveRequestPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getNode() const;
    virtual void setNode(const char * node);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const LeaveRequestPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, LeaveRequestPacket& obj) {obj.parsimUnpack(b);}


}  // namespace inet


namespace omnetpp {

template<> inline inet::JoinRequestPacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::JoinRequestPacket*>(ptr.get<cObject>()); }
template<> inline inet::SessionKeyPacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::SessionKeyPacket*>(ptr.get<cObject>()); }
template<> inline inet::LeaveRequestPacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::LeaveRequestPacket*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __INET_LKH_M_H

